{"version":3,"sources":["components/Block/Block.jsx","components/AnimatedBackground3D/AnimatedBackground3D.jsx","App.js","reportWebVitals.js","index.js"],"names":["Block","delay","cn","duration","blockStyle","animationDelay","className","style","console","log","initOptopns","count","blocks","AnimatedBackground3D","useState","options","setOptopns","useEffect","min","max","collection","i","push","Math","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,EAAQ,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAiBC,GAAQ,EAAlBC,SAAkB,EAARD,IAChCE,EAAa,CAEjBC,eAAgBJ,GAElB,OACE,qBAAKK,UAAS,gBAAWJ,GAAMK,MAAOH,EAAtC,SACGI,QAAQC,IAAIP,MCNbQ,G,MAAc,CAElBC,MAAO,IACPC,OAAQ,GACRN,UAAW,KAGAO,EAAuB,WAAO,IAAD,EACVC,mBAASJ,GADC,mBACjCK,EADiC,KACxBC,EADwB,KAKjCL,EAAkBI,EAAlBJ,MAAOC,EAAWG,EAAXH,OAUd,OARAK,qBAAU,WAER,IADA,IANmBC,EAAKC,EAMlBC,EAAa,GACXC,EAAI,EAAGA,EAAIV,EAAOU,IACxBD,EAAWE,KAAK,cAAC,EAAD,CAAOrB,MAAK,WARXiB,EAQ4B,EARvBC,EAQ0B,EAP3CD,EAAM,GAAMK,KAAKC,UAAYL,EAAMD,EAAM,IAOlB,QAE9BF,EAAW,2BAAID,GAAL,IAAcH,OAAQQ,OAC/B,IAGD,qBAAKd,UAAU,uBAAf,SACGM,KCnBQa,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3792cf1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Block.scss';\r\n\r\nexport const Block = ({delay, duration, cn}) => {\r\n  const blockStyle = {\r\n    // animationDuration: duration,\r\n    animationDelay: delay\r\n  }\r\n  return (\r\n    <div className={`block ${cn}`} style={blockStyle}>\r\n      {console.log(cn)}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Block } from '../Block/Block';\r\nimport \"./AnimatedBackground3D.scss\";\r\n\r\nconst initOptopns = {\r\n  //count is 400  ==> width(20 * 5vw) * height(20 * 5vh);\r\n  count: 400, \r\n  blocks: [],\r\n  className: ''\r\n}\r\n\r\nexport const AnimatedBackground3D = () => {\r\n  const [options, setOptopns] = useState(initOptopns);\r\n  const randNumbers = (min, max) => {\r\n    return min - 0.5 + Math.random() * (max - min + 1);\r\n  } \r\n  const {count, blocks } = options;\r\n  \r\n  useEffect(() => {\r\n    const collection = [];\r\n    for(let i = 0; i < count; i++) {\r\n      collection.push(<Block delay={`${randNumbers(1, 3)}s`} />)\r\n    };\r\n    setOptopns({...options, blocks: collection});\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"animatedBackground3D\">\r\n      {blocks}\r\n    </div>\r\n  )\r\n}\r\n","import './App.scss';\nimport { AnimatedBackground3D } from './components/AnimatedBackground3D/AnimatedBackground3D'\n\nfunction App() {\n  return (\n    <AnimatedBackground3D />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}